import base64
import hashlib
from contextlib import contextmanager

from django.contrib.auth.models import User
from django.utils.translation import get_language

import test_utils
from django_browserid.auth import BrowserIDBackend
from funfactory.urlresolvers import get_url_prefix, Prefixer, set_url_prefix
from mock import patch
from tower import activate


class TestCase(test_utils.TestCase):
    """Base class for Flicks test cases."""
    @contextmanager
    def activate(self, locale):
        """Context manager that temporarily activates a locale."""
        old_prefix = get_url_prefix()
        old_locale = get_language()
        rf = test_utils.RequestFactory()
        set_url_prefix(Prefixer(rf.get('/%s/' % (locale,))))
        activate(locale)
        yield
        set_url_prefix(old_prefix)
        activate(old_locale)

    def build_user(self, email=None, salt=None, login=False):
        """Retrieve a test user account for this class, creating one if it
        does not exist.

        Pass an email as the first argument to control the user's email.
        Test user usernames are generated by the class name; use the salt
        argument to create multiple users. Set login to true to log in the
        user as well.
        """
        name = '%s_%s' % (self.__class__.__name__, salt)
        username = base64.urlsafe_b64encode(
            hashlib.sha1(name).digest()).rstrip('=')
        email = email or '%s@test.com' % username

        try:
            user = User.objects.get(username=username)
        except User.DoesNotExist:
            user = User.objects.create_user(username, email)

        if login:
            # Mock BrowserID authentication
            with patch.object(BrowserIDBackend, 'verify') as verify:
                verify.return_value = {'status': 'okay', 'email': email}
                self.client.login()

        return user
